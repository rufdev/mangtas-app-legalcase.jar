import com.rameses.annotations.*;
import com.rameses.functions.*;
import com.rameses.rules.common.*;
import housing.facts.*;
import housing.actions.*;

class HousingLedgerBillingService {
	
	@DataContext("housing_ledger")
	def ledgerEm;

	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("DateService")
	def dateSvc;


	@ProxyMethod
	public def test(){
		return "HELLO";
	}

	@ProxyMethod
	public def getBilling( def o ) {
		def bal = o.amount;

		if(!o.ledgerid) throw new Exception("Please specify ledgerid");
		
		def ledger = ledgerEm.find( [objid: o.ledgerid] ).select( "lastdatecovered,amortization" ).first();

		if(!ledger) throw new Exception("Ledger not found");

		def ldt = ledger.lastdatecovered;
		if(!ldt) throw new Exception("Specify last date covered");

		def dfrom = dateSvc.parseDate(  ldt, null );
		def dnow = dateSvc.parseDate( dateSvc.getBasicServerDate(), null );

		def d1 = (  (dfrom.year * 12) + dfrom.month  ).intValue();
		def d2 = (  (dnow.year * 12) + dnow.month  ).intValue();

		def facts = [];

		for (  int i=1; i < (d2-d1); i++ ) {
			def cdt = dateSvc.parseDate( DateFunc.getMonthAdd( dfrom.date, i ), null);
			def bi = new BillItem();
			bi.amount = ledger.amortization;
			bi.month = cdt.month;
			bi.year = cdt.year;
			facts << bi;
		};

		facts << new CurrentDate();

		/*
		def actions = new RuleAction();
		actions.addCommand( "calc-penalty", new CalcPenalty() );
		ruleSvc.execute( "housingbilling", facts, actions, null );
		*/

		ruleSvc.execute( "housingbilling", facts, null, null );

		def list = [];
		def items = facts.findAll { it instanceof BillItem }.sort{ (it.year * 12) + it.month }.each {
			def m = [ month: it.month, year: it.year, amount: it.amount, surcharge: it.surcharge, interest: it.interest ]; 	
			m.linetotal = m.amount + m.surcharge + m.interest;
			list << m;
		}; 

		return list;
	}


}